name: Deploy Python App to Azure VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: >
            {
              "clientId":"${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}",
              "tenantId":"${{ secrets.AZURE_TENANT_ID }}",
              "subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            }

      - name: Ensure Resource Group Exists
        run: |
          if az group show --name demo-rg --query 'name' --output tsv; then
            echo "Resource Group already exists"
          else
            echo "Creating Resource Group..."
            az group create --name demo-rg --location eastus
          fi

      - name: Ensure Virtual Machine Exists
        run: |
          if az vm show --resource-group demo-rg --name demo-vm --query 'name' --output tsv; then
            echo "Virtual Machine already exists"
          else
            echo "Creating Virtual Machine..."
            az vm create \
              --resource-group demo-rg \
              --name demo-vm \
              --image Canonical:0001-com-ubuntu-server-jammy:22_04-lts-gen2:latest \
              --admin-username azureuser \
              --generate-ssh-keys \
              --public-ip-sku Standard \
              --size Standard_B2s
          fi

      - name: Get VM Public IP
        run: |
          ip=$(az vm list-ip-addresses \
            --resource-group demo-rg \
            --name demo-vm \
            --query "[].virtualMachine.network.publicIpAddresses[0].ipAddress" \
            --output tsv)
          echo "VM Public IP: $ip"
          echo "ip=$ip" >> $GITHUB_ENV

      - name: Ensure SSH Key Exists & Is Configured
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          if [ ! -f ~/.ssh/id_rsa ]; then
            echo "Generating new SSH key..."
            ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          fi
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Upload SSH Public Key to VM
        run: |
          cat ~/.ssh/id_rsa.pub | ssh -o StrictHostKeyChecking=no azureuser@${{ env.ip }} \
          "mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >> ~/.ssh/authorized_keys"

      - name: Ensure SSH Port is Open
        run: |
          az vm open-port --resource-group demo-rg --name demo-vm --port 22

      - name: Verify SSH Connection
        run: ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa azureuser@${{ env.ip }} "echo SSH Connection Successful"

      - name: Install Dependencies on VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.ip }}
          username: azureuser
          key: ~/.ssh/id_rsa
          script: |
            sudo apt update
            sudo apt install -y python3 python3-pip python3-venv git

      - name: Copy Application Code to VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.ip }}
          username: azureuser
          key: ~/.ssh/id_rsa
          source: "."
          target: "~/app"

      - name: Install Dependencies and Start Python App
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.ip }}
          username: azureuser
          key: ~/.ssh/id_rsa
          script: |
            cd ~/app
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            nohup gunicorn --workers 3 --bind 0.0.0.0:8000 app:app &

      - name: Open Port 8000 for Web Access
        run: |
          az vm open-port --resource-group demo-rg --name demo-vm --port 8000
