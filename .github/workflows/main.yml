name: Deploy Python App to Azure VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download SSH Key from Artifact
        uses: actions/download-artifact@v4
        with:
          name: ssh-key
          path: ~/.ssh

      - name: Set Correct Permissions for SSH Key
        run: |
          chmod 600 ~/.ssh/id_rsa

      - name: Get VM Public IP
        run: |
          ip=$(az vm list-ip-addresses \
            --resource-group demo-rg \
            --name demo-vm \
            --query "[].virtualMachine.network.publicIpAddresses[0].ipAddress" \
            --output tsv)
          echo "VM Public IP: $ip"
          echo "ip=$ip" >> $GITHUB_ENV

      - name: Add VM to Known Hosts
        run: ssh-keyscan -H ${{ env.ip }} >> ~/.ssh/known_hosts

      - name: Verify SSH Connection
        run: ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa azureuser@${{ env.ip }} "echo SSH Connection Successful"

      - name: Deploy App via SSH
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa azureuser@${{ env.ip }} << 'EOF'
            set -e

            # Install required dependencies
            sudo apt update
            sudo apt install -y python3 python3-pip python3-venv git

            # Ensure the deployment directory exists
            mkdir -p ~/app
            cd ~/app

            # Handle first-time deployment and updates
            if [ ! -d ".git" ]; then
              echo "First-time deployment: Cloning repository..."
              git clone https://${{ secrets.TOKEN_GITHUB }}@github.com/Ayeesha208/Python-Webapp.git .
            else
              echo "Updating existing deployment..."
              git reset --hard
              git pull origin main
            fi

            # Setup virtual environment and install dependencies
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            # Ensure Gunicorn is not already running
            pkill -f gunicorn || true

            # Start the application using Gunicorn on port 8000
            nohup gunicorn --workers 3 --bind 0.0.0.0:8000 app:app &

            # Open port 8000 in the firewall (if using UFW)
            sudo ufw allow 8000 || true

            # Restart the application service (if configured as a systemd service)
            sudo systemctl restart myapp.service || true

            echo "Deployment complete! Application running on http://${{ env.ip }}:8000"
          EOF
