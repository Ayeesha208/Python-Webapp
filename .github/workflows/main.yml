name: Deploy Python App to Azure VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # ✅ Generate SSH Key Pair
      - name: Generate SSH Key Pair
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          chmod 600 ~/.ssh/id_rsa

      # ✅ Upload SSH Key
      - name: Upload SSH Key as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh-key
          path: ~/.ssh/id_rsa

      # ✅ Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: >
            {
              "clientId":"${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}",
              "tenantId":"${{ secrets.AZURE_TENANT_ID }}",
              "subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            }

      # ✅ Ensure Resource Group Exists
      - name: Ensure Resource Group Exists
        run: az group create --name demo-rg --location eastus --output none || true

      # ✅ Ensure Virtual Machine Exists
      - name: Ensure Virtual Machine Exists
        run: |
          if ! az vm show --resource-group demo-rg --name demo-vm --query 'name' --output tsv; then
            az vm create \
              --resource-group demo-rg \
              --name demo-vm \
              --image Ubuntu2204 \
              --admin-username azureuser \
              --public-ip-sku Standard \
              --size Standard_B2s \
              --output none
          fi

      # ✅ Get VM Public IP
      - name: Get VM Public IP
        run: |
          ip=$(az vm list-ip-addresses \
            --resource-group demo-rg \
            --name demo-vm \
            --query "[].virtualMachine.network.publicIpAddresses[0].ipAddress" \
            --output tsv)
          echo "VM Public IP: $ip"
          echo "ip=$ip" >> $GITHUB_ENV

      # ✅ Download SSH Key from Artifact
      - name: Download SSH Key from Artifact
        uses: actions/download-artifact@v4
        with:
          name: ssh-key
          path: ~/.ssh

      # ✅ Set Correct Permissions for SSH Key
      - name: Set Correct Permissions for SSH Key
        run: chmod 600 ~/.ssh/id_rsa

      # ✅ Manually Add SSH Public Key to VM
      - name: Manually Add SSH Public Key to VM
        run: |
          PUBLIC_KEY=$(cat ~/.ssh/id_rsa.pub)
          az vm run-command invoke \
            --resource-group demo-rg \
            --name demo-vm \
            --command-id RunShellScript \
            --scripts "mkdir -p /home/azureuser/.ssh && echo \"$PUBLIC_KEY\" >> /home/azureuser/.ssh/authorized_keys && chmod 600 /home/azureuser/.ssh/authorized_keys && chown azureuser:azureuser /home/azureuser/.ssh/authorized_keys"

      # ✅ Verify SSH Connection
      - name: Verify SSH Connection
        run: ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa azureuser@${{ env.ip }} "echo SSH Connection Successful"

      # ✅ Install Dependencies, Open Port 5000, and Deploy App
      - name: Deploy App
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa azureuser@${{ env.ip }} << 'EOF'
            set -e

            # ✅ Update & Install Required Packages
            sudo apt update
            sudo apt install -y python3 python3-pip python3-venv git ufw

            # ✅ Enable UFW Firewall and Open Port 5000
            sudo ufw --force enable
            sudo ufw allow 5000
            sudo ufw reload

            # ✅ Ensure App Directory Exists
            mkdir -p ~/app
            cd ~/app

            # ✅ Handle First-Time Deployment & Updates
            if [ ! -d .git ]; then
              echo "First-time setup: Cloning repository..."
              git clone https://${{ secrets.TOKEN_GITHUB }}@github.com/Ayeesha208/Python-Webapp.git .
            else
              echo "Repository exists: Pulling latest changes..."
              git pull origin main
            fi

            # ✅ Create Virtual Environment & Install Dependencies
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install gunicorn  # ✅ Ensure Gunicorn is installed
            pip install -r requirements.txt || true

            # ✅ Kill Existing Gunicorn Process (If Running)
            sudo pkill -f gunicorn || true

            # ✅ Create a Systemd Service for Gunicorn (if missing)
            if [ ! -f /etc/systemd/system/myapp.service ]; then
              echo "Creating systemd service..."
              sudo bash -c 'cat > /etc/systemd/system/myapp.service <<EOL
              [Unit]
              Description=Gunicorn instance to serve Python Webapp
              After=network.target

              [Service]
              User=azureuser
              Group=www-data
              WorkingDirectory=/home/azureuser/app
              Environment="PATH=/home/azureuser/app/venv/bin"
              ExecStart=/home/azureuser/app/venv/bin/gunicorn --workers 3 --bind 0.0.0.0:5000 app:app

              [Install]
              WantedBy=multi-user.target
              EOL'
              sudo systemctl daemon-reload
              sudo systemctl enable myapp.service
            fi

            # ✅ Restart Systemd Service
            sudo systemctl restart myapp.service

            # ✅ Verify Gunicorn is Running
            sleep 5
            if ! pgrep -f gunicorn > /dev/null; then
              echo "❌ Gunicorn failed to start!"
              exit 1
            fi
          EOF

      # ✅ Output Public URL for Testing
      - name: Print Access URL
        run: echo "Access the app at: http://${{ env.ip }}:5000"
